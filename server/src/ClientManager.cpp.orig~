/***********************************************************************
 * Module:  clientManager.cpp
 * Author:  Emax
 * Modified: jeudi 17 novembre 2011 12:02:58
 * Purpose: Implementation of the class clientManager
 ***********************************************************************/

#include "ClientManager.hpp"

ClientManager::ClientManager(ISocket & sock)
  : _sock(sock)
{
}

ClientManager::~ClientManager()
{
}

void		ClientManager::createClient(SOCKET sock)
{
  ServerClient	cli("Default");

  for (int i = 0; sock > int(this->_clients.size()); ++i)
    {
      this->_clients.push_back(cli);
    }
  this->_clients.push_back(cli);
}

bool		ClientManager::add(const std::string & name,
				   const std::string & password,
				   const std::string & ip,
				   int socket)
{
  ServerClient		buffer(name, password, ip);

  this->_clients.push_back(buffer);
  return (true);
}

std::string	 ClientManager::getName(SOCKET socket) const
{
  return (this->_clients[socket].getName());
}

bool			ClientManager::isInList(unsigned short i) const
{
  if (i <= this->_clients.size())
    return (true);
  return (false);
}

SOCKET			ClientManager::getSock(const std::string & name) const
{

  for (int i = 0; i < static_cast<int> (this->_clients.size()); ++i)
    if (this->_clients[i].getName() == name)
      return i;
  return -1;
}

ServerClient 		ClientManager::getClient(const SOCKET socket) const
{
  return this->_clients[socket];
}

std::vector<ServerClient>	ClientManager::getClients() const
{
  return this->_clients;
}
